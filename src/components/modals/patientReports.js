import React, { useState, useEffect } from "react";
import { Modal, Accordion, Button, Spinner } from "react-bootstrap";
import NotFound from "../common/notFound";
import useGetMountData from "../../helpers/getDataHook";
import { getMdHTMLValue } from "../../helpers/utils";
import { callPostApi } from "../../_service";
import { toastMessage } from "../../config/toast";
import { useNavigate } from "react-router-dom";
import { callSocket } from "../../config/socket";

const AppointmentReports = ({
  customData,
  showModal,
  handleClose,
  handleUpdate,
}) => {
  const [reportTreatment, setReportTreatment] = useState({});
  const [anzLoading, setAnzLoading] = useState(null);
  const [isPatientOnline, setIsPatientOnline] = useState(false);
  const [checkingOnlineStatus, setCheckingOnlineStatus] = useState(false);
  const navigate = useNavigate();

  const { data: isReports, loading } = useGetMountData(
    `/patient/reports/${customData?.patientId?._id}`
  );

  // Check patient online status when modal opens
  useEffect(() => {
    if (showModal && customData?.patientId?._id) {
      console.log("🎯 Modal opened, checking patient online status...");
      checkPatientOnlineStatus();
    }
  }, [showModal, customData?.patientId?._id]);

  const handleAnalyser = async (item) => {
    try {
      setAnzLoading(item?._id);
      const response = await callPostApi(`/doctor/symptom-analyser`, {
        patientReport: item?.symptomReport,
        reportId: item?._id,
      });
      if (response?.status) {
        setAnzLoading(false);
        toastMessage("success", "Symptom report analyzed successfully!");
        setReportTreatment((prev) => ({
          ...prev,
          [response.data?.reportId]: response.data?.treatmentPlan,
        }));
      }
    } catch (error) {
      setAnzLoading(false);
      console.error("analyser operation error:", error);
      toastMessage("error", "An unexpected error occurred while analyzing.");
    }
  };

  // Check if patient is online before starting call
  const checkPatientOnlineStatus = async () => {
    if (!customData?.patientId?._id) return false;
    
    setCheckingOnlineStatus(true);
    console.log("🔍 Checking online status for patient:", customData.patientId._id);
    
    try {
      // Check if socket is connected
      if (!callSocket.connected) {
        console.warn("⚠️ Socket not connected, attempting to connect...");
        callSocket.connect();
        await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
      }
      
      console.log("📡 Socket connection status:", {
        connected: callSocket.connected,
        id: callSocket.id
      });
      
      // Emit a request to check if patient is online
      return new Promise((resolve) => {
        const timeout = setTimeout(() => {
          console.log("⏰ Online status check timed out");
          resolve(false);
        }, 5000); // 5 second timeout
        
        console.log("📤 Emitting check-user-online for:", customData.patientId._id);
        
        callSocket.emit("check-user-online", { 
          userId: customData.patientId._id 
        });
        
        callSocket.once("user-online-status", (data) => {
          console.log("📥 Received online status response:", data);
          clearTimeout(timeout);
          setIsPatientOnline(data.isOnline);
          resolve(data.isOnline);
        });
      });
    } catch (error) {
      console.error("❌ Error checking online status:", error);
      return false;
    } finally {
      setCheckingOnlineStatus(false);
    }
  };

  const handleStart = async () => {
    console.log(customData, "customData");

    let patientId = customData?.patientId?._id;
    let doctorId = customData?.refDoctor;
    let appointmentId = customData?._id;
    let appointmentType = customData?.appointmentType;

    if (!patientId || !doctorId || !appointmentId || !appointmentType) {
      toastMessage("error", "Missing appointment details. Please try again.");
      return;
    }

    // Check if patient is online first
    toastMessage("info", "Checking if patient is online...");
    const isOnline = await checkPatientOnlineStatus();
    
    // For now, let's be more permissive and just inform the doctor
    if (!isOnline) {
      toastMessage("warning", "Patient appears offline. Initiating call anyway - they will be notified.");
    } else {
      toastMessage("success", "Patient is online! Initiating call...");
    }

    try {
      // First, initiate the call on backend to notify the patient
      console.log("Initiating call with:", {
        appointment_id: appointmentId,
        mode: appointmentType,
        patientId,
        doctorId
      });

      const response = await callPostApi("doctor/call/start", {
        appointment_id: appointmentId,
        token: "", // Token will be generated by backend
        mode: appointmentType,
      });

      console.log("Call initiation response:", response);

      if (response?.status) {
        toastMessage("success", `${appointmentType} call initiated. ${isOnline ? 'Patient should receive notification now.' : 'Patient will be notified when online.'}`);
        
        // Close the modal
        handleClose();
        
        // Navigate to the call interface
        navigate(`/${appointmentType.toLowerCase()}-call`, {
          state: {
            patientId,
            doctorId,
            appointmentId,
            mode: appointmentType,
          },
        });
      } else {
        toastMessage("error", response?.message || "Failed to initiate call. Please try again.");
      }
    } catch (error) {
      console.error("Call initiation error:", error);
      toastMessage("error", error?.response?.data?.message || "Failed to initiate call. Please try again.");
    }
  };

  return (
    <Modal show={showModal} onHide={handleClose} centered size="lg">
      <Modal.Header closeButton>
        <Modal.Title>Appointment Reports</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <div className="container mt-3">
          {loading || isReports?.length === 0 ? (
            <NotFound
              loading={loading}
              isData={isReports?.length > 0}
              message="No symptom reports found."
              loaderLabel="Fetching symptom reports..."
            />
          ) : (
            <Accordion>
              {isReports.map((item, index) => (
                <Accordion.Item eventKey={item?._id.toString()} key={item?._id}>
                  <Accordion.Header>
                    <span>{`${index + 1}. Report for: ${item?.symptoms}`}</span>
                  </Accordion.Header>
                  <Accordion.Body>
                    {/* <div className="report-info">
                      <p>
                        <strong>Age:</strong> {item?.age}
                      </p>
                      <p>
                        <strong>Height:</strong> {item?.height} cm
                      </p>
                      <p>
                        <strong>Weight:</strong> {item?.weight} kg
                      </p>
                    </div> */}
                    {/* Basic Info */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div className="flex justify-between">
                        <strong>Age:</strong> <span>{item?.age || "-"}</span>
                      </div>
                      <div className="flex justify-between">
                        <strong>Height:</strong>{" "}
                        <span>{item?.height ? `${item.height} cm` : "-"}</span>
                      </div>
                      <div className="flex justify-between">
                        <strong>Weight:</strong>{" "}
                        <span>{item?.weight ? `${item.weight} kg` : "-"}</span>
                      </div>
                    </div>

                    {/* Vitals */}
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      {item?.bloodPressure && (
                        <div className="flex justify-between">
                          <strong>Blood Pressure:</strong>
                          <span>{item?.bloodPressure}</span>
                        </div>
                      )}
                      {item?.bodyTemperature && (
                        <div className="flex justify-between">
                          <strong>Body Temperature:</strong>
                          <span>{item?.bodyTemperature}°C</span>
                        </div>
                      )}
                      {item?.spo2 && (
                        <div className="flex justify-between">
                          <strong>SpO2:</strong>
                          <span>{item?.spo2}%</span>
                        </div>
                      )}
                    </div>

                    <h4 className="mt-3">
                      <strong>Summary:</strong>
                    </h4>
                    <div
                      dangerouslySetInnerHTML={{
                        __html: getMdHTMLValue(JSON.parse(item?.symptomReport)),
                      }}
                    />

                    {!reportTreatment[item?._id] && (
                      <div className="mt-3 text-center">
                        <Button
                          disabled={anzLoading === item?._id}
                          onClick={() => handleAnalyser(item)}
                          variant="primary"
                        >
                          Analyze Report{" "}
                          {anzLoading === item?._id && (
                            <Spinner
                              animation="border"
                              size="sm"
                              className="ms-2"
                            />
                          )}
                        </Button>
                      </div>
                    )}

                    {reportTreatment[item?._id] && (
                      <div className="mt-4 p-3 border rounded bg-light">
                        <h4>
                          <strong>Identified Treatment:</strong>
                        </h4>
                        <div
                          dangerouslySetInnerHTML={{
                            __html: getMdHTMLValue(reportTreatment[item?._id]),
                          }}
                        />
                      </div>
                    )}
                  </Accordion.Body>
                </Accordion.Item>
              ))}
            </Accordion>
          )}
        </div>
      </Modal.Body>
      <Modal.Footer>
        <div className="d-flex align-items-center gap-2 mb-2">
          {customData?.patientId && (
            <>
              <small className={`text-${isPatientOnline ? 'success' : 'muted'}`}>
                <i className={`fa-solid fa-circle me-1`} style={{fontSize: '8px'}}></i>
                {checkingOnlineStatus ? 'Checking...' : isPatientOnline ? 'Patient Online' : 'Patient Offline'}
              </small>
              <Button 
                size="sm" 
                variant="outline-secondary" 
                onClick={checkPatientOnlineStatus}
                disabled={checkingOnlineStatus}
              >
                <i className="fa-solid fa-refresh me-1"></i>
                Refresh Status
              </Button>
            </>
          )}
        </div>
        <Button
          variant="primary"
          onClick={handleStart}
          disabled={!customData?.appointmentType || !customData?.patientId || !customData?.refDoctor || checkingOnlineStatus}
        >
          {checkingOnlineStatus ? (
            <>
              <i className="fa-solid fa-spinner fa-spin me-2"></i>
              Checking Status...
            </>
          ) : (
            <>
              <i className={`fa-solid ${customData?.appointmentType?.toLowerCase() === 'video' ? 'fa-video' : customData?.appointmentType?.toLowerCase() === 'audio' ? 'fa-microphone' : 'fa-comments'} me-2`}></i>
              Start {customData?.appointmentType ? customData.appointmentType.charAt(0).toUpperCase() + customData.appointmentType.slice(1) : ''} Appointment
            </>
          )}
        </Button>
        <Button variant="secondary" onClick={handleClose}>
          Close
        </Button>
      </Modal.Footer>

      {/* Custom Styles */}
      <style jsx>{`
        .report-info p {
          margin: 0;
        }
        .bg-light {
          background-color: #f8f9fa !important;
        }
      `}</style>
    </Modal>
  );
};

export default AppointmentReports;
